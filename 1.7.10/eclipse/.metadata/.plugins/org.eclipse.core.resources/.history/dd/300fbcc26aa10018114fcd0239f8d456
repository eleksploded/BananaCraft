package com.eleksploded.BananaCraft.armor;

import com.eleksploded.BananaCraft.utility.LogHelper;
import com.eleksploded.BananaCraft.utility.func;

import cpw.mods.fml.common.registry.GameRegistry;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.item.ItemArmor.ArmorMaterial;
import net.minecraftforge.common.util.EnumHelper;

public class ArmorInit {
	public static ArmorMaterial ReinBananaArmor = EnumHelper.addArmorMaterial("ReinBananaArmor", 38, new int[] {3, 7, 5, 3}, 11);
	public static ArmorMaterial AwakenedBananaArmor = EnumHelper.addArmorMaterial("AwakenedBananaArmor", 39, new int[] {5, 10, 8, 5}, 22);
	public static ArmorMaterial CorruptArmor = EnumHelper.addArmorMaterial("CorruptArmor", 40, new int[] {7, 13, 11, 7}, 33);
	public static ArmorMaterial PurifiedArmor = EnumHelper.addArmorMaterial("CorruptArmor", 41, new int[] {8, 14, 12, 8}, 40);

	//Tier 1
	public static Item BananaHelmet;
	public static Item BananaChestplate;
	public static Item BananaLeggings;
	public static Item BananaBoots;
	//Tier 2
	public static Item AwakenedBananaHelmet;
	public static Item AwakenedBananaChestplate;
	public static Item AwakenedBananaLeggings;
	public static Item AwakenedBananaBoots;
	//Tier3
	public static Item CorruptHelmet;
	public static Item CorruptChestplate;
	public static Item CorruptLeggings;
	public static Item CorruptBoots;
	//Tier 4
	public static Item PurifiedHelmet;
	public static Item PurifiedChestplate;
	public static Item PurifiedLeggings;
	public static Item PurifiedBoots;

	public static void init() {
		//Tier 1
		GameRegistry.registerItem(BananaHelmet = new BananaArmor("BananaHelmet", ReinBananaArmor, "ReinBananaArmor", 0), "Banana_helmet"); //0 for helmet
		GameRegistry.registerItem(BananaChestplate = new BananaArmor("BananaChestplate", ReinBananaArmor, "ReinBananaArmor", 1), "Banana_chestplate"); // 1 for chestplate
		GameRegistry.registerItem(BananaLeggings = new BananaArmor("BananaLeggings", ReinBananaArmor, "ReinBananaArmor", 2), "Banana_leggings"); // 2 for leggings
		GameRegistry.registerItem(BananaBoots = new BananaArmor("BananaBoots", ReinBananaArmor, "ReinBananaArmor", 3), "Banana_boots"); // 3 for boots
		//Tier 2
		GameRegistry.registerItem(AwakenedBananaHelmet = new AwakenedArmor("AwakenedBananaHelmet", AwakenedBananaArmor, "AwakenedBananaArmor", 0), "Awakened_Helmet");
		GameRegistry.registerItem(AwakenedBananaChestplate = new AwakenedArmor("AwakenedBananaChestplate", AwakenedBananaArmor, "AwakenedBananaArmor", 1), "Awakened_Chestplate");
		GameRegistry.registerItem(AwakenedBananaLeggings = new AwakenedArmor("AwakenedBananaLeggings", AwakenedBananaArmor, "AwakenedBananaArmor", 2), "Awakened_Leggings");
		GameRegistry.registerItem(AwakenedBananaBoots = new AwakenedArmor("AwakenedBananaBoots", AwakenedBananaArmor, "AwakenedBananaArmor", 3), "Awakened_Boots");
		//Tier 3
		GameRegistry.registerItem(CorruptHelmet = new CorruptArmor("CorruptHelmet", CorruptArmor, "CorruptArmor", 0), "CorruptHelmet");
		GameRegistry.registerItem(CorruptChestplate = new CorruptArmor("CorruptChestplate", CorruptArmor, "CorruptArmor", 1), "CorruptChestplate");
		GameRegistry.registerItem(CorruptLeggings = new CorruptArmor("CorruptLeggings", CorruptArmor, "CorruptArmor", 2), "CorruptLeggings");
		GameRegistry.registerItem(CorruptBoots = new CorruptArmor("CorruptBoots", CorruptArmor, "CorruptArmor", 3), "CorruptBoots");
		//Tier 4
		GameRegistry.registerItem(PurifiedHelmet = new PurifiedArmor("PurifiedHelmet", PurifiedArmor, "PurifiedArmor", 0), "PurifiedHelmet");
		GameRegistry.registerItem(PurifiedChestplate = new PurifiedArmor("PurifiedChestplate", PurifiedArmor, "PurifiedArmor", 1), "PurifiedChestplate");
		GameRegistry.registerItem(PurifiedLeggings = new PurifiedArmor("PurifiedLeggings", PurifiedArmor, "PurifiedArmor", 2), "PurifiedLeggings");
		GameRegistry.registerItem(PurifiedBoots = new PurifiedArmor("PurifiedBoots", PurifiedArmor, "PurifiedArmor", 3), "PurifiedBoots");
	}
	public static boolean isFullAwakenedSet(EntityPlayer player) {
		ItemStack boots = ((EntityPlayer)player).inventory.armorInventory[0];
		ItemStack pants = ((EntityPlayer)player).inventory.armorInventory[1];
		ItemStack chest = ((EntityPlayer)player).inventory.armorInventory[2];
		ItemStack head = ((EntityPlayer)player).inventory.armorInventory[3];

		Item Itemboots;
		Item Itempants;
		Item Itemchest;
		Item Itemhead;

		if(boots != null && pants != null && chest != null && head != null){
			Itemboots = boots.getItem();
			Itempants = pants.getItem();
			Itemchest = chest.getItem();
			Itemhead = head.getItem();


			if(Itemboots == AwakenedBananaBoots && Itempants == AwakenedBananaLeggings && Itemchest == AwakenedBananaChestplate && Itemhead == AwakenedBananaHelmet)
			{
				return true;
			} else {
				return false;
			} 
		}else {
			return false;
		}
	}
	public static boolean isFullCorruptSet(EntityPlayer player) {
		ItemStack boots = ((EntityPlayer)player).inventory.armorInventory[0];
		ItemStack pants = ((EntityPlayer)player).inventory.armorInventory[1];
		ItemStack chest = ((EntityPlayer)player).inventory.armorInventory[2];
		ItemStack head = ((EntityPlayer)player).inventory.armorInventory[3];
		Item Itemboots;
		Item Itempants;
		Item Itemchest;
		Item Itemhead;

		if(boots != null && pants != null && chest != null && head != null){
			Itemboots = boots.getItem();
			Itempants = pants.getItem();
			Itemchest = chest.getItem();
			Itemhead = head.getItem();
			if(Itemboots == CorruptBoots && Itempants == CorruptLeggings && Itemchest == CorruptChestplate && Itemhead == CorruptHelmet)
			{
				return true;
			} else {
				return false;
			}
		}else {
			return false;
		}
	}
	public static boolean isFullPurifiedSet(EntityPlayer player) {
		ItemStack boots = ((EntityPlayer)player).inventory.armorInventory[0];
		ItemStack pants = ((EntityPlayer)player).inventory.armorInventory[1];
		ItemStack chest = ((EntityPlayer)player).inventory.armorInventory[2];
		ItemStack head = ((EntityPlayer)player).inventory.armorInventory[3];

		Item Itemboots;
		Item Itempants;
		Item Itemchest;
		Item Itemhead;

		if(boots != null && pants != null && chest != null && head != null){
			Itemboots = boots.getItem();
			Itempants = pants.getItem();
			Itemchest = chest.getItem();
			Itemhead = head.getItem();

			if(Itemboots == PurifiedBoots && Itempants == PurifiedLeggings && Itemchest == PurifiedChestplate && Itemhead == PurifiedHelmet)
			{
				return true;
			} else {
				return false;
			}
		}else {
			return false;
		} 
	} 
	public static void damageArmor(EntityPlayer player, int amount) {
		ItemStack boots = ((EntityPlayer)player).inventory.armorInventory[0];
		ItemStack pants = ((EntityPlayer)player).inventory.armorInventory[1];
		ItemStack chest = ((EntityPlayer)player).inventory.armorInventory[2];
		ItemStack head = ((EntityPlayer)player).inventory.armorInventory[3];

		if(boots != null){
			int currentBoots = boots.getMaxDamage() - boots.getItemDamage();
			if(currentBoots <= amount) {
				func.removeItem(player, boots);
			} else {
				boots.damageItem(amount, player);
			}
		}
		if(pants != null){
			int currentpants = pants.getMaxDamage() - pants.getItemDamage();
			if(currentpants <= amount) {
				func.removeItem(player, pants);
			} else {
				pants.damageItem(amount, player);
			}
		}
		if(chest != null){
			int currentchest = chest.getMaxDamage() - chest.getItemDamage();
			if(currentchest <= amount) {
				func.removeItem(player, chest);
			} else {
				chest.damageItem(amount, player);
			}
		}
		if(head != null){
			int currenthead = head.getMaxDamage() - head.getItemDamage();
			if(currenthead <= amount) {
				func.removeItem(player, head);
			} else {
				head.damageItem(amount, player);
			}
		}
	}
}
